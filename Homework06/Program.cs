using System;
using System.IO;
using System.IO.Compression;

namespace Homework06
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                var N = ReadN();
                Console.WriteLine($"N: {N}");
                Console.WriteLine("Выберите вариант: ");
                Console.WriteLine("1: посчитать количество групп");
                Console.WriteLine("2: записать группы на диск");
                if (Console.ReadLine() == "2")
                {
                    Console.WriteLine("Группы записываются на диск...");
                    WriteGroups(N);
                    Console.WriteLine("  группы записаны.");
                    Console.WriteLine("Сжать группы (введите 'да')?");
                    if (Console.ReadLine() == "да")
                    {
                        CompressGroups();
                        DisplayLengths();
                    }
                }
                else
                {
                    Console.WriteLine($"Количество групп: {CalculateGroups(N)}");
                }
            }
            catch (Exception exc)
            {
                Console.WriteLine($"Ошибка: {exc.Message}");
            }
           

        }
        static int ReadN()
        {
            using var reader = new StreamReader("input.txt");
            var line = reader.ReadLine();
            if (string.IsNullOrWhiteSpace(line))
            {
                throw new Exception("N не задано");
            }
            var N = Convert.ToInt32(line);
            if (N < 1 || 1_000_000_000 < N)
            {
                throw new Exception("N выходит за диапазон от 1 до 1_000_000_000");
            }
            return N;
        }

        
        static void WriteGroups(int N)
        {
            using var writer = new StreamWriter("output.txt");
            for (var group = 1; ; group++)
            {
                var start = Math.Pow(2, group - 1);
                var end = Math.Pow(2, group) - 1;
                if (end > N)
                {
                    end = N;
                }
                writer.Write($"Группа {group}:");
                for (var i = start; i <= end; i++)
                {
                    writer.Write($" {i}");
                }
                writer.WriteLine(".");
                if (end == N)
                {
                    break;
                }
            }
        }
        static int CalculateGroups(int N)
        {
            for (var group = 1; ; group++)
            {
                var end = Math.Pow(2, group) - 1;
                if (end >= N)
                {
                    return group;
                }
            }
        }
        static void CompressGroups()
        {
            using var stream = new FileStream("output.txt.gz", FileMode.Create);
            using var compressStream = new GZipStream(stream, CompressionMode.Compress);
            using var sourceStream = new FileStream("output.txt", FileMode.Open);
            sourceStream.CopyTo(compressStream);
        }

        static void DisplayLengths()
        {
            var outputLength = new FileInfo("output.txt").Length;
            var outputGzLength = new FileInfo("output.txt.gz").Length;
            Console.WriteLine($"Размер файла до сжатия: {outputLength}");
            Console.WriteLine($"Размер файла после сжатия: {outputGzLength}");
        }
    }
}
//Что нужно сделать
//Разработайте программу, которая будет разбивать числа от 1 до N на группы,
//при этом числа в каждой отдельно взятой группе не делятся друг на друга. Число N хранится в файле,
//поэтому его необходимо сначала оттуда прочитать. Это число может изменяться от единицы до одного миллиарда.

//После получения числа N необходимо начать поиск групп неделящихся друг на друга чисел.
//Сделать это можно различными способами. Например, для N = 50 группы могут получиться такими:

//Группа 1: 1.
//Группа 2: 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47.
//Группа 3: 4 6 9 10 14 15 21 22 25 26 33 34 35 38 39 46 49.
//Группа 4: 8 12 18 20 27 28 30 42 44 45 50.
//Группа 5: 16 24 36 40.
//Группа 6: 32 48.


//А для N = 10, такими:

//Группа 1: 1.
//Группа 2: 2 7 9.
//Группа 3: 3 4 10.
//Группа 4: 5 6 8.
//Кроме распределения чисел реализуйте возможность получить только количество групп.
//После получения групп их надо записать на диск. Если пользователь захотел рассчитать только их количество,
//записывать его на диск не нужно, достаточно вывести на экран.

//После записи групп на диск необходимо спросить пользователя, хочет ли он поместить файл с группами в архив.
//В случае положительного ответа заархивируйте этот файл и выведите информацию о его размере до и
//после архивации.



//Советы и рекомендации
//Заметьте, что группы можно рассчитать совершенно разными способами, при этом неважно,
//какой способ расчёта вы выбрали ― до тех пор, пока числа в группах не делятся друг на друга,
//задача считается решённой.
//Для расчёта только количества групп необязательно проходить все числа.
//Попробуйте сделать этот расчёт с помощью формулы.
//При N равному миллиарду вам может не хватить оперативной памяти для хранения всех групп.
//Тогда стоит отказаться от их хранения.
//Не стоит использовать цикл тройной вложенности, так как это решение будет слишком медленным.
//После архивации расширение исходного файла может потеряться. Стоит предусмотреть этот момент.
//Если расчёт для миллиарда чисел идёт более 20 минут (с поправкой на слабое оборудование),
//вам стоит поменять алгоритм их поиска.
//Задачу можно решить с помощью одного цикла и без использования массивов.


//Что оценивается
//Число N прочитано из файла. Если данного числа там нет, а также если оно выходит за
//рамки заданного диапазона или не может быть прочитано, пользователю выводится сообщение об ошибке.
//Группы чисел рассчитаны, при этом в каждой группе находятся только те числа, которые не делятся
//друг на друга.
//Пользователю предлагается выбрать: рассчитать все группы или только посмотреть их
//количество для заданного N.
//После расчётов группы чисел записываются в файл, по строке на группу.
//Пользователю предлагается поместить файл с рассчитанными группами в архив.
//При его положительном ответе архив сформирован, а статистика по размеру обоих файлов выведена на экран.
//Расчёт групп для N = 1_000_000_000 не должен превышать 20 минут, какое бы оборудование ни использовалось.